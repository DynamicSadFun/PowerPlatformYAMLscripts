parameters:
  - name: numberOfDays
    displayName: "Number of Days to Look Back"
    type: string
    default: '30' # Default to the last 30 days of changes
    values:
    - '3'
    - '7'
    - '14'
    - '30'
    - '50' 
    - '70' 
    - '100'
    - 'ALL'

resources:
  repositories:
    - repository: self
      type: git

variables:
  - name: FULL_BUILD_REQUIRED
    value: 'false'  # Default to Partial build unless deletions are detected

name: $(Date:yyyy.MM.dd).$(Rev:r)

jobs:
  - job: Build_job_portals
    displayName: 'Build Portal'
    pool:
      vmImage: windows-latest
    steps:
      # Checkout the repository
      - checkout: self
        fetchDepth: 0
        clean: false
        timeoutInMinutes: 60

      # Conditional logic for "ALL" parameter
      - ${{ if eq(parameters.numberOfDays, 'ALL') }}:
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Full Artifact: $(Portal_Name)'
          inputs:
            PathtoPublish: '$(Portal_Path)'
            ArtifactName: '$(Portal_Name) Configuration'
            publishLocation: 'Container'
    
      # Check if deletions require a full build
      - ${{ if ne(parameters.numberOfDays, 'ALL') }}:
        - powershell: |
            $days = "${{ parameters.numberOfDays }}"
            $deletedFiles = git log --since="$days days ago" --diff-filter=D --pretty=format: --name-only -- "$(Portal_Path)"

            if ($deletedFiles) {
                Write-Output "Deleted files detected in the last $days days. A full build is required."
                echo "##vso[task.setvariable variable=FULL_BUILD_REQUIRED;]true"
            } else {
                Write-Output "No deleted files detected in the last $days days. Proceeding with partial build."
                echo "##vso[task.setvariable variable=FULL_BUILD_REQUIRED;]false"
            }
          displayName: 'Check for Deleted Files'

        # Publish a full build if deletions were detected
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Full Artifact (deletions detected): $(Portal_Name)'
          condition: eq(variables['FULL_BUILD_REQUIRED'], 'true')
          inputs:
            PathtoPublish: '$(Portal_Path)'
            ArtifactName: '$(Portal_Name) Configuration'
            publishLocation: 'Container'

        # Perform an partial build if no deletions are detected
        - powershell: |
            # Define the source and destination folders
            $sourceFolder = "$(Build.SourcesDirectory)\$(Portal_Path)"
            $destination = "$(Build.ArtifactStagingDirectory)\filtered"
            $days = "${{ parameters.numberOfDays }}"
        
            # Initialize an empty list for changed files
            $changedFiles = @{}
        
            # Fetch only changed and added files from Git history
            git log --since="$days days ago" --name-only --pretty=format: --diff-filter=AM -- "$(Portal_Path)" | Sort-Object -Unique | ForEach-Object {
                $filePath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath ($_ -replace '/', '\')
                if (Test-Path $filePath) {
                    Write-Output "Detected changed file: $filePath"
                    $changedFiles[$filePath] = $true
                } else {
                    Write-Output "WARNING: File does not exist: $filePath"
                }
            }
        
            # Ensure 'website.yml' is included (important for Power Pages configurations)
            $websiteFile = Join-Path -Path $sourceFolder -ChildPath "website.yml"
            if (Test-Path $websiteFile) {
                Write-Output "Adding mandatory 'website.yml' to the changed files"
                $changedFiles[$websiteFile] = $true
            }
        
            # Include all deployment profile files (needed for consistent deployments)
            $deploymentProfilesFolder = Join-Path -Path $sourceFolder -ChildPath "deployment-profiles"
            if (Test-Path $deploymentProfilesFolder) {
                Write-Output "Adding deployment profiles:"
                Get-ChildItem -Path $deploymentProfilesFolder -Recurse | ForEach-Object {
                    Write-Output "Including deployment file: $($_.FullName)"
                    $changedFiles[$_.FullName] = $true
                }
            }
        
            # Process and include neighboring YAML files
            $changedFilesWithYml = @{}
            foreach ($file in $changedFiles.Keys) {
                # Include the detected file
                $changedFilesWithYml[$file] = $true
                Write-Output "Processing file: $file"
        
                # Identify and include YAML files in the same directory
                $directory = [System.IO.Path]::GetDirectoryName($file)
                if (Test-Path $directory) {
                    $baseName = [System.IO.Path]::GetFileNameWithoutExtension($file)
                    $adjustedBaseName = $baseName -replace '\.[^.]+$', ''
                    $ymlFiles = Get-ChildItem -Path $directory -Filter "$adjustedBaseName*.yml" -File
                    foreach ($ymlFile in $ymlFiles) {
                        Write-Output "Found neighboring YAML file: $($ymlFile.FullName)"
                        $changedFilesWithYml[$ymlFile.FullName] = $true
                    }
                } else {
                    Write-Output "WARNING: Directory not found for file: $file"
                }
            }
        
            # Log the final list of files selected for upload
            Write-Output "Final list of files for partial deployment:"
            $changedFilesWithYml.Keys | ForEach-Object { Write-Output $_ }
        
            # Ensure the destination directory exists before copying
            New-Item -ItemType Directory -Force -Path $destination | Out-Null
        
            # Copy selected files while maintaining the directory structure
            foreach ($file in $changedFilesWithYml.Keys) {
                if ($file.StartsWith($sourceFolder) -and $file.Length -gt $sourceFolder.Length) {
                    $relativePath = $file.Substring($sourceFolder.Length).TrimStart('\')
                    $destinationPath = Join-Path -Path $destination -ChildPath $relativePath
        
                    # Ensure target directory exists
                    $destinationDir = [System.IO.Path]::GetDirectoryName($destinationPath)
                    New-Item -ItemType Directory -Force -Path $destinationDir | Out-Null
        
                    # Copy file to the target directory
                    Write-Output "Copying: $file -> $destinationPath"
                    Copy-Item -Path $file -Destination $destinationPath -Recurse
                } else {
                    Write-Output "Skipping invalid or deleted file path: $file"
                }
            }
          displayName: 'Filter & Copy Changed Files (YAML & Deployment Profiles)'
          condition: eq(variables['FULL_BUILD_REQUIRED'], 'false')
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Partial Artifact: $(Portal_Name)'
          condition: eq(variables['FULL_BUILD_REQUIRED'], 'false')
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)\filtered'
            ArtifactName: '$(Portal_Name) Configuration'
            publishLocation: 'Container'
